/**
 * generated by Xtext 2.12.0
 */
package m1ice.idm.generator;

import java.util.function.Consumer;
import m1ice.idm.lab1.State;
import m1ice.idm.lab1.StateMachine;
import m1ice.idm.lab1.Transition;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.xtend2.lib.StringConcatenation;
import org.eclipse.xtext.generator.AbstractGenerator;
import org.eclipse.xtext.generator.IFileSystemAccess2;
import org.eclipse.xtext.generator.IGeneratorContext;
import org.eclipse.xtext.xbase.lib.StringExtensions;

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
@SuppressWarnings("all")
public class Lab2Generator extends AbstractGenerator {
  private final String DEFAULT_PACKAGE = "m1ice.Xtend.lab";
  
  private final String DEFAULT_PATH = "";
  
  private StateMachine stateMachine;
  
  @Override
  public void doGenerate(final Resource resource, final IFileSystemAccess2 fsa, final IGeneratorContext context) {
    EObject _get = resource.getContents().get(0);
    this.stateMachine = ((StateMachine) _get);
    fsa.generateFile((this.DEFAULT_PATH + "/State.java"), this.printAbstractState());
    final Consumer<State> _function = (State st) -> {
      String _firstUpper = StringExtensions.toFirstUpper(st.getName());
      String _plus = ((this.DEFAULT_PATH + "/") + _firstUpper);
      String _plus_1 = (_plus + ".java");
      fsa.generateFile(_plus_1, this.print(st));
    };
    this.stateMachine.getStates().forEach(_function);
    String _firstUpper = StringExtensions.toFirstUpper(this.stateMachine.getName());
    String _plus = (_firstUpper + ".java");
    fsa.generateFile(_plus, this.print(this.stateMachine));
  }
  
  /**
   * Define the content of the StateMachine class.
   */
  public CharSequence print(final StateMachine machine) {
    CharSequence _xblockexpression = null;
    {
      String machineLower = StringExtensions.toFirstLower(machine.getName());
      String machineUpper = StringExtensions.toFirstUpper(machine.getName());
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("package ");
      _builder.append(this.DEFAULT_PACKAGE);
      _builder.append(";");
      _builder.newLineIfNotEmpty();
      _builder.append("\t");
      _builder.newLine();
      _builder.append("import java.util.Scanner;");
      _builder.newLine();
      _builder.append("import java.util.ArrayList;");
      _builder.newLine();
      _builder.append("import java.util.List;");
      _builder.newLine();
      _builder.newLine();
      _builder.append("public class ");
      _builder.append(machineUpper);
      _builder.append(" {");
      _builder.newLineIfNotEmpty();
      _builder.newLine();
      _builder.append("\t");
      _builder.append("private State current;");
      _builder.newLine();
      _builder.append("\t");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("private List<State> states = new ArrayList();");
      _builder.newLine();
      _builder.append("\t");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("public ");
      _builder.append(machineUpper, "\t");
      _builder.append("() {");
      _builder.newLineIfNotEmpty();
      {
        EList<State> _states = machine.getStates();
        for(final State state : _states) {
          {
            boolean _isInit = state.isInit();
            if (_isInit) {
              _builder.append("\t\t");
              _builder.append("this.current = new ");
              String _firstUpper = StringExtensions.toFirstUpper(state.getName());
              _builder.append(_firstUpper, "\t\t");
              _builder.append("();");
              _builder.newLineIfNotEmpty();
            }
          }
        }
      }
      _builder.append("\t\t");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("// Adding every states");
      _builder.newLine();
      {
        EList<State> _states_1 = machine.getStates();
        for(final State state_1 : _states_1) {
          _builder.append("\t\t");
          _builder.append("this.states.add(new ");
          String _firstUpper_1 = StringExtensions.toFirstUpper(state_1.getName());
          _builder.append(_firstUpper_1, "\t\t");
          _builder.append("());");
          _builder.newLineIfNotEmpty();
        }
      }
      _builder.append("\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("/**");
      _builder.newLine();
      _builder.append("\t ");
      _builder.append("* Hande the state change.");
      _builder.newLine();
      _builder.append("\t ");
      _builder.append("* @param transition, the transition name wanted by the user.");
      _builder.newLine();
      _builder.append("\t ");
      _builder.append("*/");
      _builder.newLine();
      _builder.append("\t ");
      _builder.append("public String next(String transition){");
      _builder.newLine();
      {
        EList<Transition> _transitions = machine.getTransitions();
        for(final Transition transition : _transitions) {
          _builder.append("\t\t");
          _builder.append("// ");
          String _name = transition.getName();
          _builder.append(_name, "\t\t");
          _builder.append(" transition from ");
          String _name_1 = transition.getFrom().getName();
          _builder.append(_name_1, "\t\t");
          _builder.append(" to ");
          String _name_2 = transition.getTo().getName();
          _builder.append(_name_2, "\t\t");
          _builder.newLineIfNotEmpty();
          _builder.append("\t\t");
          _builder.append("if(transition.toLowerCase().equals(\"");
          String _name_3 = transition.getName();
          _builder.append(_name_3, "\t\t");
          _builder.append("\".toLowerCase())) {");
          _builder.newLineIfNotEmpty();
          _builder.append("\t\t");
          _builder.append("\t");
          _builder.newLine();
          _builder.append("\t\t");
          _builder.append("\t");
          _builder.append("// If the current state is ");
          String _name_4 = transition.getFrom().getName();
          _builder.append(_name_4, "\t\t\t");
          _builder.newLineIfNotEmpty();
          _builder.append("\t\t");
          _builder.append("\t");
          _builder.append("if(\"");
          String _name_5 = transition.getFrom().getName();
          _builder.append(_name_5, "\t\t\t");
          _builder.append("\".equals(this.current.getName())) {");
          _builder.newLineIfNotEmpty();
          _builder.append("\t\t");
          _builder.append("\t");
          _builder.newLine();
          _builder.append("\t\t");
          _builder.append("\t\t");
          _builder.append("this.current = states.stream().filter(state -> state.getName().equals(\"");
          String _name_6 = transition.getTo().getName();
          _builder.append(_name_6, "\t\t\t\t");
          _builder.append("\")).findFirst().get();");
          _builder.newLineIfNotEmpty();
          _builder.append("\t\t");
          _builder.append("\t\t");
          _builder.append("return \"Transition : ");
          String _name_7 = transition.getName();
          _builder.append(_name_7, "\t\t\t\t");
          _builder.append(" from ");
          String _name_8 = transition.getFrom().getName();
          _builder.append(_name_8, "\t\t\t\t");
          _builder.append(" to ");
          String _name_9 = transition.getTo().getName();
          _builder.append(_name_9, "\t\t\t\t");
          _builder.append("\";");
          _builder.newLineIfNotEmpty();
          _builder.append("\t\t");
          _builder.append("\t");
          _builder.append("} else {");
          _builder.newLine();
          _builder.append("\t\t");
          _builder.append("\t\t");
          _builder.append("return \"## Can\'t run transition ");
          String _name_10 = transition.getName();
          _builder.append(_name_10, "\t\t\t\t");
          _builder.append(" because the current state is \"+this.current.getName()+\" and should be ");
          String _name_11 = transition.getFrom().getName();
          _builder.append(_name_11, "\t\t\t\t");
          _builder.append("\";");
          _builder.newLineIfNotEmpty();
          _builder.append("\t\t");
          _builder.append("\t");
          _builder.append("}");
          _builder.newLine();
          _builder.append("\t\t");
          _builder.append("}");
          _builder.newLine();
          _builder.append("\t");
          _builder.newLine();
        }
      }
      _builder.append("\t\t");
      _builder.append("else");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("{");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("return \"transition \" + transition + \" does not exists.\";");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("public static void main(String[] args) {");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("// Create a new StateMachine");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append(machineUpper, "\t\t");
      _builder.append(" ");
      _builder.append(machineLower, "\t\t");
      _builder.append(" = new ");
      _builder.append(machineUpper, "\t\t");
      _builder.append("();");
      _builder.newLineIfNotEmpty();
      _builder.append("\t\t");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("// First print the init state");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("System.out.println(\"Starting the ");
      _builder.append(machineUpper, "\t\t");
      _builder.append(" ... press \'exit\' to stop.\");");
      _builder.newLineIfNotEmpty();
      _builder.append("\t\t");
      _builder.append("System.out.println(\"## The init state is : \" + ");
      _builder.append(machineLower, "\t\t");
      _builder.append(".current.getName());");
      _builder.newLineIfNotEmpty();
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("Scanner scanner = new Scanner(System.in);");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("String entry = \"\";");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("// Main loop");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("while (!entry.equals(\"exit\")) {");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("System.out.println(\"## Choose a transition/exit :\");");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("entry = scanner.nextLine();");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("// Change the desired state");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("String result = ");
      _builder.append(machineLower, "\t\t\t");
      _builder.append(".next(entry);");
      _builder.newLineIfNotEmpty();
      _builder.append("\t\t\t");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("if (result != null){");
      _builder.newLine();
      _builder.append("\t\t\t\t");
      _builder.append("System.out.println(result);");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("System.out.println(\"## The current state is : \" + ");
      _builder.append(machineLower, "\t\t\t");
      _builder.append(".current.getName());");
      _builder.newLineIfNotEmpty();
      _builder.append("\t\t\t");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("System.out.println(\"");
      _builder.append(machineUpper, "\t\t");
      _builder.append(" has been stopped.\");");
      _builder.newLineIfNotEmpty();
      _builder.append("\t\t");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t");
      _builder.newLine();
      _builder.append("\t");
      CharSequence _printGetterAndSetter = this.printGetterAndSetter("State", "current");
      _builder.append(_printGetterAndSetter, "\t");
      _builder.newLineIfNotEmpty();
      _builder.append("}");
      _builder.newLine();
      _xblockexpression = _builder;
    }
    return _xblockexpression;
  }
  
  /**
   * Print the State abstract class used to implement the State Pattern.
   */
  public CharSequence printAbstractState() {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("package ");
    _builder.append(this.DEFAULT_PACKAGE);
    _builder.append(";");
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    _builder.append("/**");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* A State used by a {@Link ");
    String _firstUpper = StringExtensions.toFirstUpper(this.stateMachine.getName());
    _builder.append(_firstUpper, " ");
    _builder.append("}");
    _builder.newLineIfNotEmpty();
    _builder.append(" ");
    _builder.append("* @author generated");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("public abstract class State {");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("private String name;");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.newLine();
    _builder.append("\t");
    CharSequence _printGetterAndSetter = this.printGetterAndSetter(State.class.getName().getClass().getSimpleName(), "name");
    _builder.append(_printGetterAndSetter, "\t");
    _builder.newLineIfNotEmpty();
    _builder.append("}");
    _builder.newLine();
    return _builder;
  }
  
  /**
   * Define every states sub-classes.
   */
  public CharSequence print(final State s) {
    CharSequence _xblockexpression = null;
    {
      String paramType = StringExtensions.toFirstUpper(this.stateMachine.getName());
      String paramName = StringExtensions.toFirstLower(this.stateMachine.getName());
      String stateName = StringExtensions.toFirstUpper(s.getName());
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("package ");
      _builder.append(this.DEFAULT_PACKAGE);
      _builder.append(";");
      _builder.newLineIfNotEmpty();
      _builder.newLine();
      _builder.append("/**");
      _builder.newLine();
      _builder.append(" ");
      _builder.append("* Represent a specific {@link State}.");
      _builder.newLine();
      _builder.append(" ");
      _builder.append("* @author generated");
      _builder.newLine();
      _builder.append(" ");
      _builder.append("*/");
      _builder.newLine();
      _builder.append("public class ");
      _builder.append(stateName);
      _builder.append(" extends State {");
      _builder.newLineIfNotEmpty();
      _builder.append("\t");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("public ");
      _builder.append(stateName, "\t");
      _builder.append("(){");
      _builder.newLineIfNotEmpty();
      _builder.append("\t\t");
      _builder.append("this.setName(\"");
      String _firstLower = StringExtensions.toFirstLower(stateName);
      _builder.append(_firstLower, "\t\t");
      _builder.append("\");");
      _builder.newLineIfNotEmpty();
      _builder.append("\t");
      _builder.append("}\t\t");
      _builder.newLine();
      _builder.append("}");
      _builder.newLine();
      _xblockexpression = _builder;
    }
    return _xblockexpression;
  }
  
  /**
   * Define a getter and a setter for the given attribute.
   */
  public CharSequence printGetterAndSetter(final String type, final String attributeName) {
    CharSequence _xblockexpression = null;
    {
      final String attributeNameUpper = StringExtensions.toFirstUpper(attributeName);
      final String attributeNameLower = StringExtensions.toFirstLower(attributeName);
      final String typeUpper = StringExtensions.toFirstUpper(type);
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("/**");
      _builder.newLine();
      _builder.append(" ");
      _builder.append("* Getter of ");
      _builder.append(attributeNameLower, " ");
      _builder.append(".");
      _builder.newLineIfNotEmpty();
      _builder.append(" ");
      _builder.append("*/");
      _builder.newLine();
      _builder.append("public ");
      _builder.append(typeUpper);
      _builder.append(" get");
      _builder.append(attributeNameUpper);
      _builder.append("(){");
      _builder.newLineIfNotEmpty();
      _builder.append("\t");
      _builder.append("return this.");
      _builder.append(attributeNameLower, "\t");
      _builder.append(";");
      _builder.newLineIfNotEmpty();
      _builder.append("}");
      _builder.newLine();
      _builder.newLine();
      _builder.append("/**");
      _builder.newLine();
      _builder.append(" ");
      _builder.append("* Setter of ");
      _builder.append(attributeNameLower, " ");
      _builder.append(".");
      _builder.newLineIfNotEmpty();
      _builder.append(" ");
      _builder.append("*/");
      _builder.newLine();
      _builder.append("public void set");
      _builder.append(attributeNameUpper);
      _builder.append("(");
      _builder.append(typeUpper);
      _builder.append(" ");
      _builder.append(attributeNameLower);
      _builder.append("){");
      _builder.newLineIfNotEmpty();
      _builder.append("\t");
      _builder.append("this.");
      _builder.append(attributeNameLower, "\t");
      _builder.append(" = ");
      _builder.append(attributeNameLower, "\t");
      _builder.append(";");
      _builder.newLineIfNotEmpty();
      _builder.append("}");
      _builder.newLine();
      _xblockexpression = _builder;
    }
    return _xblockexpression;
  }
}
