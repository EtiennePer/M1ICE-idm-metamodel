/*
 * generated by Xtext 2.12.0
 */
package m1ice.idm.generator

import org.eclipse.emf.ecore.resource.Resource
import org.eclipse.xtext.generator.AbstractGenerator
import org.eclipse.xtext.generator.IFileSystemAccess2
import org.eclipse.xtext.generator.IGeneratorContext
import m1ice.idm.lab1.StateMachine
import m1ice.idm.lab1.State
import m1ice.idm.lab1.Transition

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
class Lab2Generator extends AbstractGenerator {

	val String DEFAULT_PACKAGE = "m1ice.Xtend.lab"
	val String DEFAULT_PATH = ""
	
	var StateMachine stateMachine;
	
	override void doGenerate(Resource resource, IFileSystemAccess2 fsa, IGeneratorContext context) {
		
		// Get the desired StateMachine object
		this.stateMachine = resource.contents.get(0) as StateMachine
			
		// Generate State class of State Pattern
		fsa.generateFile(DEFAULT_PATH + '/State.java', printAbstractState())
		
		// Generate each State as a class
		stateMachine.states.forEach[st | fsa.generateFile(DEFAULT_PATH + '/' + st.name.toFirstUpper() + '.java', st.print)]
		
		// Generate the StateMachine
		fsa.generateFile(stateMachine.name.toFirstUpper() + '.java', stateMachine.print)
	
	}
	
	// # ---------------------------- #
	// # - STATE MACHINE GENERATION - #
	// # ---------------------------- #
	
	/**
	 * Define the content of the StateMachine class. 
	 */
	def print(StateMachine machine){
	var machineLower = machine.name.toFirstLower();
	var machineUpper = machine.name.toFirstUpper();
	
	'''
	package «DEFAULT_PACKAGE»;
		
	import java.util.Scanner;
	import java.util.ArrayList;
	import java.util.List;
	import java.util.Optional;
	
	public class «machineUpper» {
	
		private State current;
		
		private List<State> states = new ArrayList();
		
		public «machineUpper»() {
			«FOR state: machine.states»
			«IF state.init»
				this.current = new «state.name.toFirstUpper»();
			«ENDIF»
			«ENDFOR»
			
			// Adding every states
			«FOR state: machine.states»
			this.states.add(new «state.name.toFirstUpper()»());
			«ENDFOR»
		}
		
		public void next(String transition){
			«FOR transition: machine.transitions»
			// «transition.name» transition from «transition.from.name» to «transition.to.name»
			if(transition.equals("«transition.name»")) {
				this.current = states.stream().filter(state -> state.getName().equals("«transition.to.name»")).findFirst().get();
			}
			«ENDFOR»
		}
		
		public static void main(String[] args) {
			
			// Create a new StateMachine
			«machineUpper» «machineLower» = new «machineUpper»();
			
			// First print the init state
			System.out.println("Starting the StateMachine ... press 'exit' to stop.");
			System.out.println("The init state is : " + «machineLower».current.getName());
	
			Scanner scanner = new Scanner(System.in);
			String entry = "";
			// Main loop
			while (!entry.equals("exit")) {
				entry = scanner.nextLine();
				
				// Change the desired state
				«machineLower».next(entry);
				System.out.println("The current state is : " + «machine.name.toFirstLower()».current.getName());
				
			}
			
			System.out.println("StateMachine has been stopped.");
			
		}
		
		«printGetterAndSetter("State", "current")»
	}
	'''
	}
	
	// # --------------------- #
	// # - STATES GENERATION - #
	// # --------------------- #
	
	/*
	 * Print the State abstract class used to implement the State Pattern.
	 */
	def printAbstractState()'''
	package «DEFAULT_PACKAGE»;
	
	public abstract class State {
		
		private String name;
				
		«printGetterAndSetter(State.name.class.simpleName, 'name')»
	}
	'''
	
	/**
	 * Define every states sub-classes.
	 */
	def print(State s){
	
	var paramType = this.stateMachine.name.toFirstUpper()
	var paramName = this.stateMachine.name.toFirstLower()
	var stateName = s.name.toFirstUpper()
	
	'''
	package «DEFAULT_PACKAGE»;
	
	public class «stateName» extends State {
		
		public «stateName»(){
			this.setName("«stateName.toFirstLower()»");
		}		
	}
	'''
	}
	
	
	// # ----------- #
	// # - HELPERS - #
	// # ----------- #
	
	/**
	 * Define a getter and a setter for the given attribute.
	 */
	def printGetterAndSetter(String type, String attributeName){
	
	// Define the variables
	val attributeNameUpper = attributeName.toFirstUpper()
	val attributeNameLower = attributeName.toFirstLower()
	val typeUpper = type.toFirstUpper()
	
	// Print the getter and setter content
	'''
	/**
	 * Getter of «attributeNameLower».
	 */
	public «typeUpper» get«attributeNameUpper»(){
		return this.«attributeNameLower»;
	}
	
	/**
	 * Setter of «attributeNameLower».
	 */
	public void set«attributeNameUpper»(«typeUpper» «attributeNameLower»){
		this.«attributeNameLower» = «attributeNameLower»;
	}
	'''
	}
		
}
